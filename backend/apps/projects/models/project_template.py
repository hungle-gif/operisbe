"""
Project Template model - Predefined project templates for customers to choose
"""
from django.db import models
from core.database.base_model import BaseModel


class ProjectTemplateCategory(models.TextChoices):
    """Project template category choices"""
    WEB_DEVELOPMENT = 'web_development', 'Ph√°t tri·ªÉn Website'
    MOBILE_APP = 'mobile_app', '·ª®ng d·ª•ng Mobile'
    ENTERPRISE_SYSTEM = 'enterprise_system', 'H·ªá th·ªëng Doanh nghi·ªáp'
    ECOMMERCE = 'ecommerce', 'Th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠'
    CRM_SYSTEM = 'crm_system', 'H·ªá th·ªëng CRM'
    ERP_SYSTEM = 'erp_system', 'H·ªá th·ªëng ERP'
    AI_ML = 'ai_ml', 'AI & Machine Learning'
    CONSULTING = 'consulting', 'T∆∞ v·∫•n'
    MAINTENANCE = 'maintenance', 'B·∫£o tr√¨ & H·ªó tr·ª£'


class ProjectTemplate(BaseModel):
    """
    Project Template model for predefined project types
    Admins can create templates that customers can choose when creating service requests
    """

    # Basic information
    name = models.CharField(max_length=255, help_text="T√™n d·ª± √°n m·∫´u, v√≠ d·ª•: 'X√¢y d·ª±ng h·ªá th·ªëng qu·∫£n tr·ªã doanh nghi·ªáp'")
    description = models.TextField(help_text="M√¥ t·∫£ chi ti·∫øt v·ªÅ d·ª± √°n")

    # Category
    category = models.CharField(
        max_length=50,
        choices=ProjectTemplateCategory.choices,
        default=ProjectTemplateCategory.WEB_DEVELOPMENT,
        help_text="Danh m·ª•c d·ª± √°n"
    )

    # Icon and display
    icon = models.CharField(
        max_length=100,
        null=True,
        blank=True,
        help_text="Icon class ho·∫∑c emoji cho template, v√≠ d·ª•: üè¢"
    )

    # Pricing
    price_min = models.DecimalField(
        max_digits=12,
        decimal_places=0,
        help_text="Gi√° t·ªëi thi·ªÉu (VNƒê)"
    )
    price_max = models.DecimalField(
        max_digits=12,
        decimal_places=0,
        null=True,
        blank=True,
        help_text="Gi√° t·ªëi ƒëa (VNƒê), ƒë·ªÉ tr·ªëng n·∫øu mu·ªën hi·ªÉn th·ªã 'Li√™n h·ªá'"
    )

    # Timeline
    estimated_duration_min = models.IntegerField(
        help_text="Th·ªùi gian th·ª±c hi·ªán t·ªëi thi·ªÉu (ng√†y)"
    )
    estimated_duration_max = models.IntegerField(
        null=True,
        blank=True,
        help_text="Th·ªùi gian th·ª±c hi·ªán t·ªëi ƒëa (ng√†y)"
    )

    # Features and details (JSON fields for flexibility)
    key_features = models.JSONField(
        default=list,
        blank=True,
        help_text="Danh s√°ch t√≠nh nƒÉng ch√≠nh (array of strings)"
    )

    deliverables = models.JSONField(
        default=list,
        blank=True,
        help_text="S·∫£n ph·∫©m b√†n giao (array of strings)"
    )

    technologies = models.JSONField(
        default=list,
        blank=True,
        help_text="C√¥ng ngh·ªá s·ª≠ d·ª•ng (array of strings)"
    )

    phases = models.JSONField(
        default=list,
        blank=True,
        help_text="""C√°c giai ƒëo·∫°n th·ª±c hi·ªán (array of objects):
        [
            {
                "name": "Ph√¢n t√≠ch & Thi·∫øt k·∫ø",
                "duration_days": 7,
                "percentage": 20,
                "description": "..."
            },
            ...
        ]
        """
    )

    # Team structure
    team_structure = models.JSONField(
        default=dict,
        blank=True,
        help_text="""C·∫•u tr√∫c team d·ª± ki·∫øn (object):
        {
            "project_manager": 1,
            "developers": 2,
            "designers": 1,
            "testers": 1
        }
        """
    )

    # Dynamic Options Configuration
    options = models.JSONField(
        default=list,
        blank=True,
        help_text="""C·∫•u h√¨nh options ƒë·ªông cho d·ª± √°n (array of option objects):
        [
            {
                "id": "language",
                "type": "single_select",
                "label": "Ng√¥n ng·ªØ",
                "description": "Ch·ªçn ng√¥n ng·ªØ cho website",
                "required": true,
                "choices": [
                    {"value": "vi", "label": "Ti·∫øng Vi·ªát", "price_modifier": 0},
                    {"value": "en", "label": "Ti·∫øng Anh", "price_modifier": 3000000},
                    {"value": "multi", "label": "ƒêa ng√¥n ng·ªØ", "price_modifier": 8000000}
                ]
            },
            {
                "id": "features",
                "type": "multi_select",
                "label": "T√≠nh nƒÉng b·ªï sung",
                "description": "Ch·ªçn c√°c t√≠nh nƒÉng mu·ªën th√™m",
                "required": false,
                "choices": [
                    {"value": "seo", "label": "SEO N√¢ng cao", "price_modifier": 5000000},
                    {"value": "analytics", "label": "Google Analytics", "price_modifier": 2000000},
                    {"value": "chat", "label": "Live Chat", "price_modifier": 3000000}
                ]
            },
            {
                "id": "package",
                "type": "package",
                "label": "G√≥i d·ªãch v·ª•",
                "description": "Ch·ªçn g√≥i ph√π h·ª£p v·ªõi nhu c·∫ßu",
                "required": true,
                "choices": [
                    {
                        "value": "basic",
                        "label": "Basic",
                        "price": 30000000,
                        "duration_days": 30,
                        "features": ["5 trang", "Responsive", "SEO c∆° b·∫£n"]
                    },
                    {
                        "value": "standard",
                        "label": "Standard",
                        "price": 50000000,
                        "duration_days": 45,
                        "features": ["10 trang", "Responsive", "SEO n√¢ng cao", "Admin panel"]
                    }
                ]
            },
            {
                "id": "product_count",
                "type": "number_range",
                "label": "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m",
                "description": "S·ªë s·∫£n ph·∫©m t·ªëi ƒëa tr√™n h·ªá th·ªëng",
                "required": true,
                "min": 100,
                "max": 10000,
                "step": 100,
                "default": 500,
                "price_per_unit": 1000
            },
            {
                "id": "custom_note",
                "type": "text_input",
                "label": "Y√™u c·∫ßu ƒë·∫∑c bi·ªát",
                "description": "Nh·∫≠p y√™u c·∫ßu t√πy ch·ªânh c·ªßa b·∫°n",
                "required": false,
                "placeholder": "V√≠ d·ª•: T√≠ch h·ª£p v·ªõi h·ªá th·ªëng ERP hi·ªán c√≥..."
            }
        ]
        """
    )

    # Status
    is_active = models.BooleanField(
        default=True,
        help_text="Template c√≥ ƒëang ho·∫°t ƒë·ªông kh√¥ng (hi·ªÉn th·ªã cho customer)"
    )

    # Display order
    display_order = models.IntegerField(
        default=0,
        help_text="Th·ª© t·ª± hi·ªÉn th·ªã (s·ªë c√†ng nh·ªè c√†ng ∆∞u ti√™n)"
    )

    class Meta:
        db_table = 'project_templates'
        verbose_name = 'Project Template'
        verbose_name_plural = 'Project Templates'
        ordering = ['display_order', 'name']

    def __str__(self):
        return self.name

    def get_price_display(self):
        """Get formatted price range for display"""
        if self.price_max:
            return f"{self.price_min:,.0f}ƒë - {self.price_max:,.0f}ƒë"
        return f"{self.price_min:,.0f}ƒë"

    def get_duration_display(self):
        """Get formatted duration for display"""
        if self.estimated_duration_max:
            return f"{self.estimated_duration_min} - {self.estimated_duration_max} ng√†y"
        return f"{self.estimated_duration_min} ng√†y"
